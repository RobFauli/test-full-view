<div data-element-guid="{{ get.current.guid }}" class="{{#helper.trim}}
    bodytext
    large-12
    small-12
    medium-12
    {{ #get.current.filtered.paywall}}
    {{ #isInternal }}{{#active}}
        {{^access}} teaserContent {{/access}}
    {{/active}}{{ /isInternal }}
    {{ /get.current.filtered.paywall }}
    {{/helper.trim}}">{{{ get.current.filtered.bodytext }}}
    {{ #get.current.filtered.paywall}}
    {{ #active}}
    {{^access}}
    {{ #displaySalesPosters }}
    {{ #render.partial }}lab4/paywall/{{provider}}{{ /render.partial }}
    {{ /displaySalesPosters }}
    {{/access}}
    {{ /active }}
    {{ /get.current.filtered.paywall }}
    {{ #app.isFront }}
    <template>
        <div class="definitionPopup">
            <div class="definitionInfo">
                <p></p>
                <span></span>
                <button class="definitionClose">&#10005;</button>
            </div>
        </div>
    </template>
    {{ /app.isFront }}
</div>

{{ #app.isFront }}
<script>
    // Get the dfn elements, and the template
    const bodytext = document.querySelector(".bodytext");
    const dfns = bodytext.querySelectorAll("dfn");
    const template = document.querySelector("template");

    const openPopup = (event) => {
        if(event.type === 'click' || (event.type === 'keydown' && event.key === 'Enter')) {
            // Stop it clicking through - this is needed to make sure the event listener
            // added to the body doesn't fire right away
            event.stopPropagation();

            // Close any open dialog
            closePopup();

            // Fetch the dfn element
            const dfn = event.target;

            // clone the template, and insert it as a sibling after the dfn
            const clone = template.content.firstElementChild.cloneNode(true);
            dfn.parentNode.style.position = "relative";
            dfn.after(clone);

            // Set the text in the popup
            const word = dfn.textContent;
            clone.querySelector("p").textContent = word;

            const info = dfn.getAttribute("title");
            clone.querySelector("span").textContent = info;

            // Add a click event for the close button.
            clone.querySelector("button").addEventListener("click", (e) => {
                e.stopPropagation();
                closePopup();
            })

            // Add an event listener to the body element - if the user clicks outside of 
            // the popup, close it
            document.body.addEventListener('click', (event) => {
                if(!clone.contains(event.target)) {
                    closePopup();
                }
            })

            // Position the popup underneath the definition clicked
            clone.style.top = (dfn.offsetTop + dfn.offsetHeight + 10)  + 'px';
            clone.style.left = dfn.offsetLeft + 'px';

            // Show the popup
            clone.style.display = "flex";
        }
    }

    const closePopup = () => {
        const popup = document.querySelector(".definitionPopup");
        if(popup) {
            popup.remove();
        }
    }

    dfns.forEach(dfn => {
        // Add event listeners for both mouse click and keydown enter
        dfn.addEventListener('click', openPopup);
        dfn.addEventListener('keydown', openPopup)
    })
</script>
{{ /app.isFront }}
